// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: product_reader.proto

package readerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReaderService_CreateProduct_FullMethodName     = "/readerService.readerService/CreateProduct"
	ReaderService_UpdateProduct_FullMethodName     = "/readerService.readerService/UpdateProduct"
	ReaderService_GetProductById_FullMethodName    = "/readerService.readerService/GetProductById"
	ReaderService_SearchProduct_FullMethodName     = "/readerService.readerService/SearchProduct"
	ReaderService_DeleteProductByID_FullMethodName = "/readerService.readerService/DeleteProductByID"
)

// ReaderServiceClient is the client API for ReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderServiceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error)
	UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error)
	GetProductById(ctx context.Context, in *GetProductByIdReq, opts ...grpc.CallOption) (*GetProductByIdResp, error)
	SearchProduct(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error)
	DeleteProductByID(ctx context.Context, in *DeleteProductByIdReq, opts ...grpc.CallOption) (*DeleteProductByIdResp, error)
}

type readerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderServiceClient(cc grpc.ClientConnInterface) ReaderServiceClient {
	return &readerServiceClient{cc}
}

func (c *readerServiceClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductResp)
	err := c.cc.Invoke(ctx, ReaderService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductResp)
	err := c.cc.Invoke(ctx, ReaderService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) GetProductById(ctx context.Context, in *GetProductByIdReq, opts ...grpc.CallOption) (*GetProductByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductByIdResp)
	err := c.cc.Invoke(ctx, ReaderService_GetProductById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) SearchProduct(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, ReaderService_SearchProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) DeleteProductByID(ctx context.Context, in *DeleteProductByIdReq, opts ...grpc.CallOption) (*DeleteProductByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductByIdResp)
	err := c.cc.Invoke(ctx, ReaderService_DeleteProductByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderServiceServer is the server API for ReaderService service.
// All implementations should embed UnimplementedReaderServiceServer
// for forward compatibility.
type ReaderServiceServer interface {
	CreateProduct(context.Context, *CreateProductReq) (*CreateProductResp, error)
	UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductResp, error)
	GetProductById(context.Context, *GetProductByIdReq) (*GetProductByIdResp, error)
	SearchProduct(context.Context, *SearchReq) (*SearchResp, error)
	DeleteProductByID(context.Context, *DeleteProductByIdReq) (*DeleteProductByIdResp, error)
}

// UnimplementedReaderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReaderServiceServer struct{}

func (UnimplementedReaderServiceServer) CreateProduct(context.Context, *CreateProductReq) (*CreateProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedReaderServiceServer) UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedReaderServiceServer) GetProductById(context.Context, *GetProductByIdReq) (*GetProductByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedReaderServiceServer) SearchProduct(context.Context, *SearchReq) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedReaderServiceServer) DeleteProductByID(context.Context, *DeleteProductByIdReq) (*DeleteProductByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedReaderServiceServer) testEmbeddedByValue() {}

// UnsafeReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderServiceServer will
// result in compilation errors.
type UnsafeReaderServiceServer interface {
	mustEmbedUnimplementedReaderServiceServer()
}

func RegisterReaderServiceServer(s grpc.ServiceRegistrar, srv ReaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedReaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReaderService_ServiceDesc, srv)
}

func _ReaderService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).CreateProduct(ctx, req.(*CreateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).UpdateProduct(ctx, req.(*UpdateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).GetProductById(ctx, req.(*GetProductByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_SearchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).SearchProduct(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_DeleteProductByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).DeleteProductByID(ctx, req.(*DeleteProductByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReaderService_ServiceDesc is the grpc.ServiceDesc for ReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readerService.readerService",
	HandlerType: (*ReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ReaderService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ReaderService_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _ReaderService_GetProductById_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _ReaderService_SearchProduct_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _ReaderService_DeleteProductByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_reader.proto",
}
